beginning-line:
// GEN INTROSPECTOR 
ending-line:
// END GEN INTROSPECTOR
introspect-base-line:
// INTROSPECT BASE
header-directories:
header-files:
@HYPERSOMNIA_HEADERS_WITH_INTROSPECTED_CLASSES_NEWLINE_SEPARATED@
generated-file-path:
@GENERATED_SOURCES_PATH@/introspectors.h
introspector-field-format:
			FIELD(%x); /* %x */
base-introspector-field-format:
			introspect_body(static_cast<%x*>(nullptr), f, _t_...);
introspector-body-format:
		template <class F%x, class... Instances>
		static void introspect_body(
			%x,
			F f,
			Instances&... _t_
		) {
%x		}

enum-field-format:
		case %x::%x: return "%x";
enum-introspector-body-format:
	template <class... T>
	const char* enum_to_string(const %x e, T...) {
		switch(e) {
%x		default: return "Invalid";
		}
	}

enum-arg-format:
			%x::%x
enum-to-args-body-format:
	template <class F>
	void enum_to_args_impl(const %x, F f) {
		f(
%x		);
	}


generated-file-format:
#pragma once
#include <tuple>
#include <array>

#include "augs/misc/trivially_copyable_tuple.h"
#include "augs/templates/for_each_in_types.h"
#include "augs/templates/string_templates.h"

#include "game/transcendental/entity_id_declaration.h"
#include "game/transcendental/cosmic_types.h"

#define FIELD(x) f(#x, _t_.x...)

// Forward declarations

namespace augs {
	namespace event {
		namespace keys {
			enum class key;
		}
	}
}

struct ImGuiStyle;
struct ImVec2;
struct ImVec4;

%xnamespace augs {
	/* Hand-written enum introspectors that do not fit into the standard schema begin here */

	template <class... T>
	std::string enum_to_string(const event::keys::key k, T...) {
		auto wstr = event::keys::key_to_wstring(k);
		str_ops(wstr).replace_all(L" ", L"");
		return std::string(wstr.begin(), wstr.end());
	}

	/* Generated introspectors begin here */
%x	struct introspection_access {
		/* Hand-written introspectors that do not fit into the standard schema begin here */

		template <class F, class ElemType, size_t count, class... Instances>
		static void introspect_body(
			const std::array<ElemType, count>* const,
			F f,
			Instances&... t
		) {
			for (size_t i = 0; i < count; ++i) {
				f(std::to_string(i), t[i]...);
			}
		}

		template <class F, class First, class Second, class... Instances>
		static void introspect_body(
			const std::pair<First, Second>* const,
			F f,
			Instances&... _t_
		) {
			FIELD(first);
			FIELD(second);
		}

		template <class F, class... Types, class... Instances>
		static void introspect_body(
			const std::tuple<Types...>* const,
			F f,
			Instances&... t
		) {
			templates_detail::for_each_through_std_get(
				[f](auto num, auto&... args) {
					f(std::to_string(num), args...);
				},
				std::index_sequence_for<Types...>{},
				t...
			);
		}

		template <class F, class... Types, class... Instances>
		static void introspect_body(
			const augs::trivially_copyable_tuple<Types...>* const,
			F f,
			Instances&... t
		) {
			templates_detail::for_each_through_std_get(
				[f](auto num, auto&... args) {
					f(std::to_string(num), args...);
				},
				std::index_sequence_for<Types...>{},
				t...
			);
		}

		template <class F, class... Instances>
		static void introspect_body(
			const ImVec2* const,
			F f,
			Instances&... _t_
		) {
			FIELD(x);
			FIELD(y);
		}

		template <class F, class... Instances>
		static void introspect_body(
			const ImVec4* const,
			F f,
			Instances&... _t_
		) {
			FIELD(x);
			FIELD(y);
			FIELD(z);
			FIELD(w);
		}

		template <class F, class... Instances>
		static void introspect_body(
			const ImGuiStyle* const,
			F f,
			Instances&... _t_
		) {
#define imcol(x) f(#x, _t_.Colors[x]...)
			FIELD(Alpha);                      
			FIELD(WindowPadding);              
			FIELD(WindowMinSize);              
			FIELD(WindowRounding);             
			FIELD(WindowTitleAlign);           
			FIELD(ChildWindowRounding);        
			FIELD(FramePadding);               
			FIELD(FrameRounding);              
			FIELD(ItemSpacing);                
			FIELD(ItemInnerSpacing);           
			FIELD(TouchExtraPadding);         
			FIELD(IndentSpacing);              
			FIELD(ColumnsMinSpacing);          
			FIELD(ScrollbarSize);              
			FIELD(ScrollbarRounding);          
			FIELD(GrabMinSize);                
			FIELD(GrabRounding);               
			FIELD(ButtonTextAlign);            
			FIELD(DisplayWindowPadding);       
			FIELD(DisplaySafeAreaPadding);     
			FIELD(AntiAliasedLines);           
			FIELD(AntiAliasedShapes);          
			FIELD(CurveTessellationTol);
			
			imcol(ImGuiCol_Text);
			imcol(ImGuiCol_TextDisabled);
			imcol(ImGuiCol_WindowBg);              
			imcol(ImGuiCol_ChildWindowBg);         
			imcol(ImGuiCol_PopupBg);               
			imcol(ImGuiCol_Border);
			imcol(ImGuiCol_BorderShadow);
			imcol(ImGuiCol_FrameBg);               
			imcol(ImGuiCol_FrameBgHovered);
			imcol(ImGuiCol_FrameBgActive);
			imcol(ImGuiCol_TitleBg);
			imcol(ImGuiCol_TitleBgCollapsed);
			imcol(ImGuiCol_TitleBgActive);
			imcol(ImGuiCol_MenuBarBg);
			imcol(ImGuiCol_ScrollbarBg);
			imcol(ImGuiCol_ScrollbarGrab);
			imcol(ImGuiCol_ScrollbarGrabHovered);
			imcol(ImGuiCol_ScrollbarGrabActive);
			imcol(ImGuiCol_ComboBg);
			imcol(ImGuiCol_CheckMark);
			imcol(ImGuiCol_SliderGrab);
			imcol(ImGuiCol_SliderGrabActive);
			imcol(ImGuiCol_Button);
			imcol(ImGuiCol_ButtonHovered);
			imcol(ImGuiCol_ButtonActive);
			imcol(ImGuiCol_Header);
			imcol(ImGuiCol_HeaderHovered);
			imcol(ImGuiCol_HeaderActive);
			imcol(ImGuiCol_Column);
			imcol(ImGuiCol_ColumnHovered);
			imcol(ImGuiCol_ColumnActive);
			imcol(ImGuiCol_ResizeGrip);
			imcol(ImGuiCol_ResizeGripHovered);
			imcol(ImGuiCol_ResizeGripActive);
			imcol(ImGuiCol_CloseButton);
			imcol(ImGuiCol_CloseButtonHovered);
			imcol(ImGuiCol_CloseButtonActive);
			imcol(ImGuiCol_PlotLines);
			imcol(ImGuiCol_PlotLinesHovered);
			imcol(ImGuiCol_PlotHistogram);
			imcol(ImGuiCol_PlotHistogramHovered);
			imcol(ImGuiCol_TextSelectedBg);
			imcol(ImGuiCol_ModalWindowDarkening);
#undef imcol
		}

		/* Generated introspectors begin here */

%x	};
}
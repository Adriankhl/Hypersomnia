beginning-line:
// GEN INTROSPECTOR 
ending-line:
// END GEN INTROSPECTOR
header-directories:
header-files:
@HYPERSOMNIA_HEADERS_WITH_INTROSPECTED_CLASSES_NEWLINE_SEPARATED@
generated-file-path:
@GENERATED_SOURCES_PATH@/introspectors.h
generated-specializations-path:
@GENERATED_SOURCES_PATH@/specializations.h
introspector-field-format:
			FIELD(%x); /* %x */
introspector-body-format:
		template <class F%x, class... Instances>
		static void introspect_body(
			%x,
			F f,
			Instances&... _t_
		) {
%x		}

specialized-list-format:
template <class __T%x>
struct types_in<%x, __T>{
	using types = type_list<%x>;
};

enum-field-format:
		case T::%x: return "%x";
enum-introspector-body-format:
	template <class... A>
	const char* enum_to_string(const %x e, A...) {
		/* Make dependent */
		using T = std::conditional_t<sizeof...(A) == 0, decltype(e), int>;

		switch(e) {
%x		default: return "Invalid";
		}
	}

enum-arg-format:
			T::%x
enum-to-args-body-format:
	template <class F>
	void enum_to_args_impl(const %x e, F f) {
		/* Make dependent */
		using T = std::conditional_t<std::is_same_v<F, int>, int, decltype(e)>;

		f(
%x		);
	}


generated-file-format:
#pragma once
#include <tuple>
#include <array>
#include <string>

#include "augs/drawing/flip.h"
#include "augs/string/get_type_name.h"
#include "augs/templates/nth_type_in.h"
#include "augs/misc/trivially_copyable_tuple.h"
#include "augs/misc/imgui/imguicol_helper.h"
#include "augs/templates/for_each_std_get.h"
#include "augs/templates/container_templates.h"
#include "game/transcendental/entity_id_declaration.h"
#include "application/setups/editor/editor_history_declaration.h"

#define FIELD(x) f(#x, _t_.x...)
#define TYPEOF(x) decltype(__T::x)

// Forward declarations

namespace augs {
	namespace event {
		namespace keys {
			enum class key;
			std::string key_to_string(const key);
		}
	}
}

struct ImGuiStyle;
struct ImVec2;
struct ImVec4;

%xnamespace augs {
	/* Hand-written enum introspectors that do not fit into the standard schema begin here */

	template <class... T>
	std::string enum_to_string(const event::keys::key k, T...) {
		auto str = event::keys::key_to_string(k);
		erase_if(str, [](const auto ch) { return ch == ' '; });
		return str;
	}

	/* Generated introspectors begin here */
%x	struct introspection_access {
		template <class T, class B>
		struct types_in;

		/* Hand-written introspectors that do not fit into the standard schema begin here */

		template <class F, class ElemType, size_t count, class... Instances>
		static void introspect_body(
			const std::array<ElemType, count>* const,
			F f,
			Instances&... t
		) {
			for (size_t i = 0; i < count; ++i) {
				f(std::to_string(i), t[i]...);
			}
		}

		template <class F, class First, class Second, class... Instances>
		static void introspect_body(
			const std::pair<First, Second>* const,
			F f,
			Instances&... _t_
		) {
			FIELD(first);
			FIELD(second);
		}

		template <class __T, class A, class B>
		struct types_in<std::pair<A, B>, __T> {
			using types = type_list<A, B>;
		};

		template <class F, class... Types, class... Instances>
		static void introspect_body(
			const std::tuple<Types...>* const,
			F f,
			Instances&... t
		) {
			templates_detail::for_each_through_std_get(
				[f](auto, auto&... args) {
					using N = remove_cref<nth_type_in_t<0, decltype(args)...>>;
					f(get_type_name_strip_namespace<N>(), args...);
				},
				std::index_sequence_for<Types...>{},
				t...
			);
		}

		template <class F, class... Types, class... Instances>
		static void introspect_body(
			const augs::trivially_copyable_tuple<Types...>* const,
			F f,
			Instances&... t
		) {
			templates_detail::for_each_through_std_get(
				[f](auto num, auto&... args) {
					using N = remove_cref<nth_type_in_t<0, decltype(args)...>>;
					f(get_type_name_strip_namespace<N>(), args...);
				},
				std::index_sequence_for<Types...>{},
				t...
			);
		}

		template <class __T, class... Args>
		struct types_in<std::tuple<Args...>, __T> {
			using types = type_list<Args...>;
		};

		template <class __T, class... Args>
		struct types_in<augs::trivially_copyable_tuple<Args...>, __T> {
			using types = type_list<Args...>;
		};

		template <class F, class... Instances>
		static void introspect_body(
			const ImVec2* const,
			F f,
			Instances&... _t_
		) {
			FIELD(x);
			FIELD(y);
		}

		template <class __T>
		struct types_in<ImVec2, __T> {
			using types = type_list<TYPEOF(x), TYPEOF(y)>;
		};

		template <class F, class... Instances>
		static void introspect_body(
			const ImVec4* const,
			F f,
			Instances&... _t_
		) {
			FIELD(x);
			FIELD(y);
			FIELD(z);
			FIELD(w);
		}

		template <class __T>
		struct types_in<ImVec4, __T> {
			using types = type_list<TYPEOF(x), TYPEOF(y), TYPEOF(z), TYPEOF(w)>;
		};

		template <class F, class... Instances>
		static void introspect_body(
			const ImGuiStyle* const,
			F f,
			Instances&... _t_
		) {
			FIELD(Alpha);
			FIELD(WindowPadding);
			FIELD(WindowRounding);
			FIELD(WindowBorderSize);
			FIELD(WindowMinSize);
			FIELD(WindowTitleAlign);
			FIELD(ChildRounding);
			FIELD(ChildBorderSize);
			FIELD(PopupRounding);
			FIELD(PopupBorderSize);
			FIELD(FramePadding);
			FIELD(FrameRounding);
			FIELD(FrameBorderSize);
			FIELD(ItemSpacing);
			FIELD(ItemInnerSpacing);
			FIELD(TouchExtraPadding);
			FIELD(IndentSpacing);
			FIELD(ColumnsMinSpacing);
			FIELD(ScrollbarSize);
			FIELD(ScrollbarRounding);
			FIELD(GrabMinSize);
			FIELD(GrabRounding);
			FIELD(ButtonTextAlign);
			FIELD(DisplayWindowPadding);
			FIELD(DisplaySafeAreaPadding);
			FIELD(MouseCursorScale);
			FIELD(AntiAliasedLines);
			FIELD(AntiAliasedFill);
			FIELD(CurveTessellationTol);

#define imcol(x) f(#x, _t_.Colors[static_cast<std::size_t>(imguicol_helper::x)]...)
			imcol(ImGuiCol_Text);
			imcol(ImGuiCol_TextDisabled);
			imcol(ImGuiCol_WindowBg);              // Background of normal windows
			imcol(ImGuiCol_ChildBg);               // Background of child windows
			imcol(ImGuiCol_PopupBg);               // Background of popups, menus, tooltips windows
			imcol(ImGuiCol_Border);
			imcol(ImGuiCol_BorderShadow);
			imcol(ImGuiCol_FrameBg);               // Background of checkbox, radio button, plot, slider, text input
			imcol(ImGuiCol_FrameBgHovered);
			imcol(ImGuiCol_FrameBgActive);
			imcol(ImGuiCol_TitleBg);
			imcol(ImGuiCol_TitleBgActive);
			imcol(ImGuiCol_TitleBgCollapsed);
			imcol(ImGuiCol_MenuBarBg);
			imcol(ImGuiCol_ScrollbarBg);
			imcol(ImGuiCol_ScrollbarGrab);
			imcol(ImGuiCol_ScrollbarGrabHovered);
			imcol(ImGuiCol_ScrollbarGrabActive);
			imcol(ImGuiCol_CheckMark);
			imcol(ImGuiCol_SliderGrab);
			imcol(ImGuiCol_SliderGrabActive);
			imcol(ImGuiCol_Button);
			imcol(ImGuiCol_ButtonHovered);
			imcol(ImGuiCol_ButtonActive);
			imcol(ImGuiCol_Header);
			imcol(ImGuiCol_HeaderHovered);
			imcol(ImGuiCol_HeaderActive);
			imcol(ImGuiCol_Separator);
			imcol(ImGuiCol_SeparatorHovered);
			imcol(ImGuiCol_SeparatorActive);
			imcol(ImGuiCol_ResizeGrip);
			imcol(ImGuiCol_ResizeGripHovered);
			imcol(ImGuiCol_ResizeGripActive);
			imcol(ImGuiCol_PlotLines);
			imcol(ImGuiCol_PlotLinesHovered);
			imcol(ImGuiCol_PlotHistogram);
			imcol(ImGuiCol_PlotHistogramHovered);
			imcol(ImGuiCol_TextSelectedBg);
			imcol(ImGuiCol_ModalWindowDarkening);  // darken entire screen when a modal window is active
			imcol(ImGuiCol_DragDropTarget);
			imcol(ImGuiCol_DragDropTarget);
			imcol(ImGuiCol_NavHighlight);
			imcol(ImGuiCol_NavWindowingHighlight);
#undef imcol
		}

		template <class __T>
		struct types_in<ImGuiStyle, __T> {
			using types = type_list<
				TYPEOF(Alpha),
				TYPEOF(WindowPadding),
				TYPEOF(WindowRounding),
				TYPEOF(WindowBorderSize),
				TYPEOF(WindowMinSize),
				TYPEOF(WindowTitleAlign),
				TYPEOF(ChildRounding),
				TYPEOF(ChildBorderSize),
				TYPEOF(PopupRounding),
				TYPEOF(PopupBorderSize),
				TYPEOF(FramePadding),
				TYPEOF(FrameRounding),
				TYPEOF(FrameBorderSize),
				TYPEOF(ItemSpacing),
				TYPEOF(ItemInnerSpacing),
				TYPEOF(TouchExtraPadding),
				TYPEOF(IndentSpacing),
				TYPEOF(ColumnsMinSpacing),
				TYPEOF(ScrollbarSize),
				TYPEOF(ScrollbarRounding),
				TYPEOF(GrabMinSize),
				TYPEOF(GrabRounding),
				TYPEOF(ButtonTextAlign),
				TYPEOF(DisplayWindowPadding),
				TYPEOF(DisplaySafeAreaPadding),
				TYPEOF(MouseCursorScale),
				TYPEOF(AntiAliasedLines),
				TYPEOF(AntiAliasedFill),
				TYPEOF(CurveTessellationTol),
				TYPEOF(Colors)
			>;
		};

#if INCLUDE_TYPES_IN
#include "generated/specializations.h"
#endif
		/* Generated introspectors begin here */

%x	};
}
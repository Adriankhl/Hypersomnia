render order:

1. Legs, 1 animation for walking, 1 for running (optional)
2. Arms, SPRITE for bare handed walking and animation for hitting, and possibly SPRITE for every kind of weapon for holding
3. Torso, multiple animations per item instance: (walking + shooting for one for every kind of weapon: bare hands, melee, rifle, sniper)
4. Head, one SPRITE per item instance, also for running.

The above is customizable.


Anyway, firstly we're going to handle only premade torso+legs.

The sprites are going to grow in number, but we'll handle it like this:
Every sprite will be named with following schema:

torso_[basic, warrior, ninja, ... etc]_[rifle, pistol, barehands]_[shoot, walk]_[1, 2, 3, 4, 5] 	= 30 sprites for every instance
legs_[instances...]_[walk, run]_[1, 2, 3, 4, 5]      												= 10 sprites for every instance

arms_[instances...]_walk_[1, 2]
arms_[instances...]_hit_[1, 2, 3, 4, 5]
arms_[instances...]_hold_[rifle, pistol, barehanded] 												= 2 + 5 + 3 = 10 sprites for every instance

head_[instances...]																					= 1 sprite for every instance

In the end, we're going to tokenize all the filenames and use them to create a nested array to map an item of specified properties to a corresponding texture object.
This in turn will be used to map an item with name "m4a1" to its sprite, for example.

Storing texture files:
Gameplay textures - these will be loaded and available all the time in the gpu; ONE FOLDER FOR ALL OF THEM
Maps textures - another folder for all of them, the game will dynamically determine which files are to be loaded (according to the current map, for example)



When the packet with a new position arrives to the server, 
it should calculate a force vector (or velocity vector) to be applied to the character so that in the next simulation step it reaches the requested position.

